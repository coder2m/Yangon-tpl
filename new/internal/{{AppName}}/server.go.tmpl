package {{.AppName}}

import (
	"context"
	"fmt"
	"github.com/BurntSushi/toml"
	invoker "github.com/myxy99/component"
	"github.com/myxy99/component/config"
	"github.com/myxy99/component/config/datasource/manager"
	database "github.com/myxy99/component/gorm"
	"github.com/myxy99/component/pkg/xcolor"
	"github.com/myxy99/component/pkg/xflag"
	"github.com/myxy99/component/pkg/xvalidator"
	"{{.ProjectName}}/internal/{{.AppName}}/api/v1/registry"
	"{{.ProjectName}}/internal/{{.AppName}}/model"
	myValidator "{{.ProjectName}}/internal/{{.AppName}}/validator"
	"net/http"
)

type Server struct {
	Server *http.Server
	err    error
}

func (s *Server) PrepareRun(stopCh <-chan struct{}) (err error) {
	s.initCfg()
	s.invoker()
	s.initDB(stopCh)
	s.initHttpServer()
	s.initRouter()
	s.initValidator()
	return s.err
}

func (s *Server) Run(stopCh <-chan struct{}) (err error) {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	go func() {
		<-stopCh
		fmt.Println(xcolor.Red(fmt.Sprintf("Shutdown server")))
		_ = s.Server.Shutdown(ctx)
	}()
	fmt.Println(xcolor.Blue(fmt.Sprintf("Start listening on %s", s.Server.Addr)))
	err = s.Server.ListenAndServe()
	return nil
}

func (s *Server) initCfg() {
	if s.err != nil {
		return
	}
	var data config.DataSource
	data, s.err = manager.NewDataSource(xflag.NString("run", "config"))
	if s.err != nil {
		return
	}
	s.err = config.LoadFromDataSource(data, toml.Unmarshal)
}

func (s *Server) invoker() {
	if s.err != nil {
		return
	}
	invoker.Register(
		database.Register("mysql"),
		//redis.Register("redis"),
	)
	s.err = invoker.Init()
}

func (s *Server) initDB(stopCh <-chan struct{}) {
	if s.err != nil {
		return
	}
	model.MainDB = database.Invoker("main")
	go func() {
		<-stopCh
		d, _ := model.MainDB.DB()
		_ = d.Close()
	}()

	s.initMigrate()
}

func (s *Server) initHttpServer() {
	if s.err != nil {
		return
	}
	s.Server = new(http.Server)
	s.Server.Addr = config.GetString("server.addr")
}

func (s *Server) initRouter() {
	if s.err != nil {
		return
	}
	s.Server.Handler = registry.Router
}

func (s *Server) initValidator() {
	if s.err != nil {
		return
	}
	s.err = xvalidator.Init(config.GetString("server.locale"), myValidator.RegisterValidation)
}

func (s *Server) initMigrate() {
	if s.err != nil {
		return
	}
	if model.MainDB != nil {
		_ = model.MainDB.AutoMigrate(
			//new(info.Info),
		)
	}
}
