package handle

import (
	"github.com/gin-gonic/gin"
	"github.com/coder2m/g-saber/xvalidator"
	"{{.ProjectName}}/internal/{{.appName}}/error/httpError"
	_map "{{.ProjectName}}/internal/{{.appName}}/map"
	"{{.ProjectName}}/internal/{{.appName}}/services/{{.tableName}}"
	R "{{.ProjectName}}/pkg/response"
)

type {{.TableName}} struct{}

func ({{.TableName}}) GetAll{{.TableName}}(ctx *gin.Context) {
	var page = _map.DefaultPageRequest
	if err := ctx.ShouldBind(&page); err != nil {
		R.HandleBadRequest(ctx, nil)
		return
	}
	if err := xvalidator.Struct(page); err != nil {
		R.HandleBadRequest(ctx, xvalidator.GetMsg(err))
		return
	}
	if data, total, err := {{.tableName}}.GetAllservices(page); err != nil {
		R.Error(ctx, err.Error(), nil)
	} else {
		R.Ok(ctx, R.MSG_OK, R.Page(total, page.Page, page.PageSize, data))
	}
	return
}

func ({{.TableName}}) Post{{.TableName}}(ctx *gin.Context) {
	var addMap _map.{{.TableName}}Addservices
	if err := ctx.ShouldBind(&addMap); err != nil {
		R.HandleBadRequest(ctx, nil)
		return
	}
	if err := xvalidator.Struct(addMap); err != nil {
		R.HandleBadRequest(ctx, xvalidator.GetMsg(err))
		return
	}
	if err := {{.tableName}}.Addservices(addMap); err != nil {
		R.Error(ctx, err.Error(), nil)
		return
	}
	R.Ok(ctx, R.MSG_OK, nil)
	return
}

func ({{.TableName}}) Get{{.TableName}}(ctx *gin.Context) {
	var id _map.IdMap
	if err := ctx.ShouldBindUri(&id); err != nil {
		R.HandleBadRequest(ctx, nil)
		return
	}
	if err := xvalidator.Struct(id); err != nil {
		R.HandleBadRequest(ctx, xvalidator.GetMsg(err))
		return
	}
	if data, err := {{.tableName}}.GetByIdservices(id); err != nil {
		R.Error(ctx, err.Error(), nil)
	} else {
		R.Ok(ctx, R.MSG_OK, data)
	}
	return
}

func ({{.TableName}}) Put{{.TableName}}(ctx *gin.Context) {
	var put _map.{{.TableName}}Putservices
	if err := ctx.ShouldBind(&put); err != nil {
		R.HandleBadRequest(ctx, nil)
		return
	}
	if err := xvalidator.Struct(put); err != nil {
		R.HandleBadRequest(ctx, xvalidator.GetMsg(err))
		return
	}
	if err := {{.tableName}}.PutByIdservices(put); err != nil {
		R.Error(ctx, err.Error(), nil)
	} else {
		R.Ok(ctx, R.MSG_OK, nil)
	}
	return
}

func ({{.TableName}}) Del{{.TableName}}(ctx *gin.Context) {
	var del _map.IdMap
	if err := ctx.ShouldBind(&del); err != nil {
		R.HandleBadRequest(ctx, nil)
		return
	}
	if err := xvalidator.Struct(del); err != nil {
		R.HandleBadRequest(ctx, xvalidator.GetMsg(err))
		return
	}
	if err := {{.tableName}}.Delservices(del); err != nil {
		R.Error(ctx, err.Error(), nil)
	} else {
		R.Ok(ctx, R.MSG_OK, nil)
	}
	return
}

func ({{.TableName}}) Rec{{.TableName}}(ctx *gin.Context) {
	var recDel _map.IdMap
	if err := ctx.ShouldBind(&recDel); err != nil {
		R.HandleBadRequest(ctx, nil)
		return
	}
	if err := xvalidator.Struct(recDel); err != nil {
		R.HandleBadRequest(ctx, xvalidator.GetMsg(err))
		return
	}
	if err := {{.tableName}}.RecDelservices(recDel); err != nil {
		R.Error(ctx, err.Error(), nil)
	} else {
		R.Ok(ctx, R.MSG_OK, nil)
	}
	return
}
